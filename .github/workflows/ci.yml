name: Continuous Integration

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  test_big_3:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "66045de4dcc5da3d1029c02b606307f5951dcb22" }

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure -C Release -j 2

  test_intel:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          {
            committish: "66045de4dcc5da3d1029c02b606307f5951dcb22",
            cache-version: 2,
          }

      - name: Intel Apt repository
        timeout-minutes: 1
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update

      - name: Install Intel oneAPI
        timeout-minutes: 5
        run: sudo apt-get install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mpi intel-oneapi-mpi-devel

      - name: Setup Intel oneAPI environment
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV

      - name: Configure
        shell: pwsh
        run: cmake --preset=ci-ubuntu -DCMAKE_CXX_COMPILER=icpx

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [test_big_3, test_intel]

    runs-on: ubuntu-latest

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    h
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'conorwilliams'

    steps:
      - uses: actions/checkout@v2

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "66045de4dcc5da3d1029c02b606307f5951dcb22" }

      - uses: actions/setup-python@v4
        with: { python-version: "3.8" }

      - name: Install python dependancies
        run: pip3 install -r docs/requirements.txt

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Configure
        run: cmake --preset=ci-ubuntu -DFLY_DOCS=ON

      - name: Build docs
        run: cmake --build build --target docs

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/sphinx
